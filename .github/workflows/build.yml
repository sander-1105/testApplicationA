name: Build and Version Management

on:
  push:
    branches:
      - main
    paths:
      - '**'
  pull_request:
    branches:
      - main
    paths:
      - '**'
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  pre-check:
    name: Pre-check Version
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      current_version: ${{ steps.read_version.outputs.current_version }}
      new_version: ${{ steps.read_version.outputs.new_version }}
      new_latest_tag: ${{ steps.read_version.outputs.new_latest_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Make scripts executable
        run: |
          chmod +x scripts/compare_version.sh
      
      - name: Version Check
        id: read_version
        run: |
          if [ ! -f "VERSION" ]; then
            echo "Error: VERSION file not found"
            exit 1
          fi
          
          # Source the VERSION file to get the version
          source VERSION
          if [ -z "$VERSION" ]; then
            echo "Error: VERSION variable not set after sourcing VERSION file"
            exit 1
          fi
          
          # Fetch all tags
          echo "Fetching all tags..."
          git fetch --tags --force
          if [ $? -ne 0 ]; then
            echo "Error: Failed to fetch tags"
            exit 1
          fi
          
          # List all tags
          echo "Available tags:"
          git tag -l | grep "^v" | sort -V
          
          # Get the latest tag using git tag -l and sort
          LATEST_TAG=$(git tag -l | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "Latest tag: $LATEST_TAG"
          
          # Remove 'v' prefix and split version
          VERSION_NUMBER=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUMBER"
          
          # Increment MINOR version
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="${MAJOR}.${NEW_MINOR}.${PATCH}"
          NEW_LATEST_TAG="v${NEW_VERSION}"
          echo "Current version: ${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "New tag: $NEW_LATEST_TAG"
          
          # Check if this is the first commit
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            if [[ $(git diff --name-only HEAD~1 HEAD) == *"VERSION"* ]]; then
              echo "Version file changed, proceeding with build"
            else
              echo "No version change, but proceeding with build for other file changes"
            fi
          else
            echo "First commit detected, proceeding with build"
          fi
          
          # Compare versions using the script
          if ! ./scripts/compare_version.sh "$NEW_VERSION" "$VERSION"; then
            echo "New version ($NEW_VERSION) is less than VERSION file version ($VERSION), incrementing VERSION file's minor version"
            # Split VERSION into components
            IFS='.' read -r V_MAJOR V_MINOR V_PATCH <<< "$VERSION"
            # Increment minor version
            V_MINOR=$((V_MINOR + 1))
            # Set new version based on VERSION file
            NEW_VERSION="${V_MAJOR}.${V_MINOR}.${V_PATCH}"
            NEW_LATEST_TAG="v${NEW_VERSION}"
            echo "Updated new version: $NEW_VERSION"
          fi
          
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_latest_tag=$NEW_LATEST_TAG" >> $GITHUB_OUTPUT

  chart-validation:
    needs: pre-check
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.base_ref == 'main')
    env:
      NEW_VERSION: ${{ needs.pre-check.outputs.new_version }}
      NEW_LATEST_TAG: ${{ needs.pre-check.outputs.new_latest_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Setup SSH
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "Error: SSH_PRIVATE_KEY secret not found"
            exit 1
          fi
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
          # Test SSH connection
          ssh -T git@github.com || true

      - name: Install yq
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq

      - name: Validate Chart Repository Access
        run: |
          # Read helm-chart-ssh-url from ci.yml
          HELM_CHART_SSH_URL=$(yq e '.helm-chart-ssh-url' ci.yml)
          if [ -z "$HELM_CHART_SSH_URL" ]; then
            echo "Error: helm-chart-ssh-url not found in ci.yml"
            exit 1
          fi
          
          # Extract repository name from URL
          REPO_NAME=$(basename "$HELM_CHART_SSH_URL" .git)
          echo "Repository name: $REPO_NAME"
          
          # Clone chart repository
          git clone "$HELM_CHART_SSH_URL" chart-temp
          cd chart-temp
          
          # Ensure we're on main branch
          git checkout main
          
          # Validate Chart.yaml
          if [ ! -f "Chart.yaml" ]; then
            echo "Error: Chart.yaml not found"
            exit 1
          fi
          
          # Read current appVersion
          CURRENT_VERSION=$(yq e '.appVersion' Chart.yaml)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not read appVersion from Chart.yaml"
            exit 1
          fi
          
          # Compare versions
          if [ "$(printf '%s\n' "$VERSION" "$NEW_VERSION" | sort -V | head -n1)" = "$NEW_VERSION" ]; then
            echo "Error: New version ($NEW_VERSION) is not greater than VERSION file version ($VERSION)"
            exit 1
          fi
          
          echo "Chart validation successful"
          echo "Current appVersion: $CURRENT_VERSION"
          echo "New appVersion will be: $NEW_VERSION"

  docker-build:
    needs: [pre-check, chart-validation]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.base_ref == 'main')
    env:
      NEW_VERSION: ${{ needs.pre-check.outputs.new_version }}
      NEW_LATEST_TAG: ${{ needs.pre-check.outputs.new_latest_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image using Task
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVICE_ACCOUNT_BASE64_FILE: ${{ secrets.SERVICE_ACCOUNT_BASE64_FILE }}
        run: |
          task docker:build

  version-update:
    needs: [pre-check, chart-validation, docker-build]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.base_ref == 'main')
    env:
      CURRENT_VERSION: ${{ needs.pre-check.outputs.current_version }}
      NEW_VERSION: ${{ needs.pre-check.outputs.new_version }}
      NEW_LATEST_TAG: ${{ needs.pre-check.outputs.new_latest_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Update version file,create and push tag.
        run: |
          if ! sed -i.bak "s/export VERSION=.*/export VERSION=${{ env.NEW_VERSION }}/" VERSION; then
            echo "Error: Failed to update VERSION file"
            exit 1
          fi
          rm -f VERSION.bak
          
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          
          # Ensure we're on main branch
          git checkout main
          
          # Add and commit changes
          git add VERSION
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          
          # Create and push tag
          git tag -a "${{ env.NEW_LATEST_TAG }}" -m "Release version ${{ env.NEW_VERSION }}"
          
          # Push changes and tag
          git push origin main
          git push origin "${{ env.NEW_LATEST_TAG }}"
          
          # Verify the changes
          echo "Verifying changes..."
          git fetch origin
          git diff origin/main -- VERSION

  chart-update:
    needs: [pre-check, version-update, docker-build]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.base_ref == 'main')
    env:
      NEW_VERSION: ${{ needs.pre-check.outputs.new_version }}
      NEW_LATEST_TAG: ${{ needs.pre-check.outputs.new_latest_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main

      - name: Setup SSH
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "Error: SSH_PRIVATE_KEY secret not found"
            exit 1
          fi
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-keyscan gitlab.com >> ~/.ssh/known_hosts

      - name: Install yq
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq

      - name: Update App A Chart Repository
        run: |
          # Read helm-chart-ssh-url from ci.yml
          HELM_CHART_SSH_URL=$(yq e '.helm-chart-ssh-url' ci.yml)
          if [ -z "$HELM_CHART_SSH_URL" ]; then
            echo "Error: helm-chart-ssh-url not found in ci.yml"
            exit 1
          fi
          echo "helm-chart-ssh-url: $HELM_CHART_SSH_URL"
          
          # Extract repository name from URL
          REPO_NAME=$(basename "$HELM_CHART_SSH_URL" .git)
          echo "Repository name: $REPO_NAME"
          
          # Clone chart repository
          git clone "$HELM_CHART_SSH_URL"
          cd "$REPO_NAME"
          
          # Ensure we're on main branch
          git checkout main
          
          # Check if Chart.yaml exists
          if [ ! -f "Chart.yaml" ]; then
            echo "Error: Chart.yaml not found"
            exit 1
          fi
          
          # Check if values.yaml exists
          if [ ! -f "values.yaml" ]; then
            echo "Error: values.yaml not found"
            exit 1
          fi
          
          # Read current appVersion
          CURRENT_VERSION=$(yq e '.appVersion' Chart.yaml)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Error: Could not read appVersion from Chart.yaml"
            exit 1
          fi
          
          # Read current imageTag
          CURRENT_IMAGE_TAG=$(yq e '.imageTag' values.yaml)
          echo "Current imageTag: $CURRENT_IMAGE_TAG"
          
          # Check if version needs to be updated
          if [ "$CURRENT_VERSION" = "$NEW_VERSION" ] && [ "$CURRENT_IMAGE_TAG" = "$NEW_VERSION" ]; then
            echo -e "\033[31mVersion conflict: the current version number($CURRENT_VERSION) is the same as the new version number($NEW_VERSION). Please check.\033[0m"
            exit 0
          fi
          
          # Update appVersion in Chart.yaml
          yq e -i -P ".appVersion = \"$NEW_VERSION\"" Chart.yaml
          if [ $? -ne 0 ]; then
            echo "Error: Failed to update appVersion in Chart.yaml"
            exit 1
          fi
          
          # Update imageTag in values.yaml
          yq e -i -P ".imageTag = \"$NEW_VERSION\"" values.yaml
          if [ $? -ne 0 ]; then
            echo "Error: Failed to update imageTag in values.yaml"
            exit 1
          fi
          
          # Verify the updates
          echo "Verifying updates..."
          echo "New appVersion in Chart.yaml: $(yq e '.appVersion' Chart.yaml)"
          echo "New imageTag in values.yaml: $(yq e '.imageTag' values.yaml)"
          
          # Commit and push changes
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          git add .
          git commit -m "chore: Update Chart appVersion to $NEW_VERSION and imageTag to $NEW_VERSION"
          git push origin main --tags --atomic